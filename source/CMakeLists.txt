cmake_minimum_required(
	
	VERSION "3.27.0"
	
	FATAL_ERROR
)





# Project
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================





project(
	
	"Project_Name"
	
	VERSION 0.0.1
	
	DESCRIPTION "Insert project description here..."
	
	LANGUAGES CXX
)




# [[ C++ settings ]]
# [[ ------------------------------------------------------------------------- ]]
# [[ ------------------------------------------------------------------------- ]]


set(

	CMAKE_CXX_STANDARD
	
	17
)

set(

	CMAKE_CXX_STANDARD_REQUIRED
	
	ON
)

set(

	CMAKE_CXX_EXTENSIONS
	
	OFF
)


# [[ ------------------------------------------------------------------------- ]]
# [[ ------------------------------------------------------------------------- ]]
# [[ C++ settings ]]





# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# Project




















# File structure
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================





# [[ Files ]]
# [[ ------------------------------------------------------------------------- ]]
# [[ ------------------------------------------------------------------------- ]]


set(

    HEADER_FILES
    
    # List of header files:
	
)

set(

    SOURCE_FILES
    
    # List of source files:
    "${CMAKE_SOURCE_DIR}/src/main.cpp"
)


# [[ ------------------------------------------------------------------------- ]]
# [[ ------------------------------------------------------------------------- ]]
# [[ Files ]]





# [[ Include directories ]]
# [[ ------------------------------------------------------------------------- ]]
# [[ ------------------------------------------------------------------------- ]]


set(

    INCLUDE_DIRS
    
    # List of include directories:
    "${CMAKE_SOURCE_DIR}/include/"
)


include_directories(

	# Used to resolve dependencies.
	${INCLUDE_DIRS}
)


# [[ ------------------------------------------------------------------------- ]]
# [[ ------------------------------------------------------------------------- ]]
# [[ Include directories ]]





# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# File structure




















# Build settings
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================





# [[ Global variables ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


# This variable will be used as a common path for all outputs.
set(

	OUTPUT_DIRECTORY
	
	""
)


set(

	CMAKE_BINARY_DIR
	
	"${CMAKE_SOURCE_DIR}/../build/bin"
)


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Global variables ]]





# [[ Folder structure based on architecture ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


if(CMAKE_SIZEOF_VOID_P EQUAL 8)

	set(
	
		OUTPUT_DIRECTORY
		
		"${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/64-bit/"
	)
	
endif()



if(CMAKE_SIZEOF_VOID_P EQUAL 4)

	set(
	
		OUTPUT_DIRECTORY
		
		"${CMAKE_BINARY_DIR}/${CMAKE_SYSTEM_NAME}/32-bit/"
	)
	
endif()


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Folder structure based on architecture ]]





# [[ Target output paths ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


set(

	CMAKE_RUNTIME_OUTPUT_DIRECTORY	# Defines executable path
	
	"${OUTPUT_DIRECTORY}/$<CONFIG>/executable"
)

set(

	CMAKE_LIBRARY_OUTPUT_DIRECTORY	# Defines shared lib path
	
	"${OUTPUT_DIRECTORY}/$<CONFIG>/lib_shared"
)

set(

	CMAKE_ARCHIVE_OUTPUT_DIRECTORY	# Defines static lib path
	
	"${OUTPUT_DIRECTORY}/$<CONFIG>/lib_static"
)


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Target output paths ]]





# [[ Executable ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


set(

	EXECUTABLE_NAME
	
	"${PROJECT_NAME}"
)

add_executable(

	# Target name.
	${EXECUTABLE_NAME}
	
	# Target files.
	${HEADER_FILES}
	${SOURCE_FILES}
)


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Executable ]]





# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# Build settings




















# Preprocessor definitions
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================





# [[ Architecture ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


if(CMAKE_SIZEOF_VOID_P EQUAL 8)

	target_compile_definitions(
	
		${EXECUTABLE_NAME}
		
		PUBLIC
		
		"TARGET_IS_64_BIT"
	)
	
endif()


if(CMAKE_SIZEOF_VOID_P EQUAL 4)

	target_compile_definitions(
	
		${EXECUTABLE_NAME}
		
		PUBLIC
		
		"TARGET_IS_32_BIT"
	)
	
endif()


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Architecture ]]





# [[ Operating system ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


if(CMAKE_SYSTEM_NAME STREQUAL "Windows")

	target_compile_definitions(
	
		${EXECUTABLE_NAME}
		
		PUBLIC
		
		"TARGET_IS_WINDOWS"
	)

endif()


if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    
	target_compile_definitions(
	
		${EXECUTABLE_NAME}
		
		PUBLIC
		
		"TARGET_IS_APPLE"
	)

endif()


if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    
	target_compile_definitions(
	
		${EXECUTABLE_NAME}
		
		PUBLIC
		
		"TARGET_IS_LINUX"
	)

endif()


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Operating system ]]





# [[ Configuration ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


target_compile_definitions(

	${EXECUTABLE_NAME}
	
    PUBLIC
	
	$<$<CONFIG:Debug>:DEBUG_MODE>
	$<$<CONFIG:Release>:RELEASE_MODE>
	$<$<CONFIG:RelWithDebInfo>:RELEASE_WITH_DEBUGINFO_MODE>
	$<$<CONFIG:MinSizeRel>:RELEASE_MINSIZE_MODE>
)


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Configuration ]]





# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# Preprocessor definitions




















# Libraries
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================





# Adding library header files to the include tree.
# Specifies where the executable target should look for include files.
target_include_directories(
    
    ${EXECUTABLE_NAME}

    PUBLIC

    # Lib headers
)


# Adding library implementation files to the executable.
target_link_libraries(
    
    ${EXECUTABLE_NAME}
    
    # Lib implementations
)





# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# Libraries




















# Logging information
# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================





message("\n")
message("[[ ----------------------- Configuration -------------------------- ]]")
message("\n")	



message(STATUS "Provided name for Project:\t\t\t ${PROJECT_NAME}")
message(STATUS "Provided name for Executable:\t\t ${EXECUTABLE_NAME}")

message("")



# [[ Host information ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


cmake_host_system_information(

	RESULT HOST_NAME
	
	QUERY OS_NAME
)

cmake_host_system_information(

	RESULT HOST_IS_64BIT
	
	QUERY IS_64BIT
)





message(

	STATUS

	"Host operating system name is:\t\t ${HOST_NAME}"
)





if(HOST_IS_64BIT EQUAL 1)


	message(

		STATUS

		"Host operating system platform is:\t\t 64-bit"
	)



else()


	message(

		STATUS

		"Host operating system architecture is:\t\t 32-bit"
	)

endif()



message("")


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Host information ]]





# [[ Target information ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


message(

	STATUS

	"Target operating system name is:\t\t ${CMAKE_SYSTEM_NAME}"
)





if(CMAKE_SIZEOF_VOID_P EQUAL 8) # Void pointers in 64-bit systems are 8 bytes.

	message(
	
		STATUS
		
		"Target operating system platform is:\t\t 64-bit"
	)
	
endif()



if(CMAKE_SIZEOF_VOID_P EQUAL 4) # Void pointers in 32-bit systems are 4 bytes.

	message(
	
		STATUS
		
		"Target operating system platform is:\t\t 32-bit"
	)
	
endif()


message("")

# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Target information ]]





# [[ Build information ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]


get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)

if(IS_MULTI_CONFIG)

	message(
		
		STATUS
		
		"THE BUILD_TYPE:\t\t\t\t Generator is multi-config. Cannot determine build type."
	)
	
else()

	message(
		
		STATUS
		
		"The BUILD_TYPE:\t\t\t ${CMAKE_BUILD_TYPE}"
	)

endif()



message("")



message(

	STATUS
	
	"The SOURCE_DIR folder path is:\t\t ${CMAKE_SOURCE_DIR}"
)


message(

	STATUS
	
	"The BINARY_DIR folder path is:\t\t ${CMAKE_BINARY_DIR}"
)


# [[ ----------------------------------------------------------------------- ]]
# [[ ----------------------------------------------------------------------- ]]
# [[ Build information ]]





message("\n")
message("[[ ----------------------- Configuration -------------------------- ]]")
message("\n")





# =============================================================================
# =============================================================================
# =============================================================================
# =============================================================================
# Logging information